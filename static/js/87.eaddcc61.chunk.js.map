{"version":3,"file":"static/js/87.eaddcc61.chunk.js","mappings":"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","sources":["webpack://react-redux-homework/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-redux-homework/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-redux-homework/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"addButton\":\"ContactForm_addButton__zGNsx\"};","import clsx from 'clsx';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const name = evt.target.name.value;\n    const number = evt.target.number.value;\n\n    if (\n      contacts.find(person => person.name.toLowerCase() === name.toLowerCase())\n    ) {\n      Notify.failure('This name is already exist in contacts book');\n      return;\n    }\n\n    if (contacts.find(person => person.number === number)) {\n      Notify.failure('This number is already exist in contacts book');\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    evt.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={clsx(css.form)}>\n      <label className={clsx(css.label)}>\n        Name\n        <input\n          className={clsx(css.input)}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={clsx(css.label)}>\n        Number\n        <input\n          className={clsx(css.input)}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={clsx(css.addButton)} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import clsx from 'clsx'\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport css from './Filter.module.css'\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    const value = evt.target.value;\n    dispatch(changeFilter(value))\n  }\n    return (\n      <label className={clsx(css.filter)}>\n        <span className={clsx(css.label)}>Filter by name</span>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleChange}\n          className={clsx(css.input)}\n        />\n      </label>\n    );\n  };\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"parName\":\"ContactList_parName__rZFAC\",\"name\":\"ContactList_name__UCkFW\",\"number\":\"ContactList_number__2af8f\",\"dellButton\":\"ContactList_dellButton__-JWS3\",\"title\":\"ContactList_title__gpugJ\",\"loader\":\"ContactList_loader__3ATTL\",\"error\":\"ContactList_error__uCB2f\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { Circles } from 'react-loader-spinner';\nimport clsx from 'clsx';\nimport {\n  getContacts,\n  getError,\n  getFilterValue,\n  getIsLoading,\n} from '../../redux/selectors';\nimport { deleteContact } from 'redux/operations';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  if (error) {\n    Notify.failure(`${error}`);\n  }\n\n  function contactsToShow() {\n    if (filter === '') {\n      return contacts;\n    }\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n\n  if (contactsToShow().length === 0) {\n    Notify.warning('Sorry but there is no results for your request!');\n    return (\n      <p className={clsx(css.title)}>\n        Sorry but there is no results for your request!\n      </p>\n    );\n  }\n\n  return (\n    <>\n      {isLoading && (\n        <div className={clsx(css.loader)}>\n          <Circles\n            height=\"50\"\n            width=\"50\"\n            color=\"#3dc7fd\"\n            ariaLabel=\"circles-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            visible={true}\n          />\n        </div>\n      )}\n      <ul className={clsx(css.list)}>\n        {contacts &&\n          contactsToShow().map(({ id, name, number }) => (\n            <li key={id} className={clsx(css.item)}>\n              <span>\n                <p className={clsx(css.parName)}>\n                  <span>Name: </span>\n                  <span className={clsx(css.name)}>{name}</span>\n                </p>\n                <p>\n                  <span>Number:</span>\n                  <span className={clsx(css.number)}>{number}</span>\n                </p>\n              </span>\n              <button\n                onClick={() => dispatch(deleteContact(id))}\n                className={clsx(css.dellButton)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        {error && <li className={clsx(css.error)}>Whoops: {error}</li>}\n      </ul>\n    </>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { useEffect } from 'react';\n\nconst Phonebook = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      {contacts.length > 2 && <Filter />}\n      {contacts.length !== 0 && <ContactList />}\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["contacts","useSelector","getContacts","dispatch","useDispatch","onSubmit","evt","preventDefault","name","target","value","number","find","person","toLowerCase","Notify","addContact","reset","className","clsx","css","type","pattern","title","required","onChange","changeFilter","filter","getFilterValue","isLoading","getIsLoading","error","getError","contactsToShow","contact","includes","length","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","map","id","onClick","deleteContact","useEffect","fetchContacts"],"sourceRoot":""}